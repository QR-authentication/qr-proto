// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.26.1
// source: qr.proto

package qr_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	QRService_CreateQR_FullMethodName = "/QRService/CreateQR"
	QRService_VerifyQR_FullMethodName = "/QRService/VerifyQR"
)

// QRServiceClient is the client API for QRService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QRServiceClient interface {
	CreateQR(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CreateQROut, error)
	VerifyQR(ctx context.Context, in *VerifyQRIn, opts ...grpc.CallOption) (*VerifyQROut, error)
}

type qRServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQRServiceClient(cc grpc.ClientConnInterface) QRServiceClient {
	return &qRServiceClient{cc}
}

func (c *qRServiceClient) CreateQR(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CreateQROut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateQROut)
	err := c.cc.Invoke(ctx, QRService_CreateQR_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qRServiceClient) VerifyQR(ctx context.Context, in *VerifyQRIn, opts ...grpc.CallOption) (*VerifyQROut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyQROut)
	err := c.cc.Invoke(ctx, QRService_VerifyQR_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QRServiceServer is the server API for QRService service.
// All implementations must embed UnimplementedQRServiceServer
// for forward compatibility.
type QRServiceServer interface {
	CreateQR(context.Context, *emptypb.Empty) (*CreateQROut, error)
	VerifyQR(context.Context, *VerifyQRIn) (*VerifyQROut, error)
	mustEmbedUnimplementedQRServiceServer()
}

// UnimplementedQRServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedQRServiceServer struct{}

func (UnimplementedQRServiceServer) CreateQR(context.Context, *emptypb.Empty) (*CreateQROut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQR not implemented")
}
func (UnimplementedQRServiceServer) VerifyQR(context.Context, *VerifyQRIn) (*VerifyQROut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyQR not implemented")
}
func (UnimplementedQRServiceServer) mustEmbedUnimplementedQRServiceServer() {}
func (UnimplementedQRServiceServer) testEmbeddedByValue()                   {}

// UnsafeQRServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QRServiceServer will
// result in compilation errors.
type UnsafeQRServiceServer interface {
	mustEmbedUnimplementedQRServiceServer()
}

func RegisterQRServiceServer(s grpc.ServiceRegistrar, srv QRServiceServer) {
	// If the following call pancis, it indicates UnimplementedQRServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&QRService_ServiceDesc, srv)
}

func _QRService_CreateQR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QRServiceServer).CreateQR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QRService_CreateQR_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QRServiceServer).CreateQR(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _QRService_VerifyQR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyQRIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QRServiceServer).VerifyQR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QRService_VerifyQR_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QRServiceServer).VerifyQR(ctx, req.(*VerifyQRIn))
	}
	return interceptor(ctx, in, info, handler)
}

// QRService_ServiceDesc is the grpc.ServiceDesc for QRService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QRService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "QRService",
	HandlerType: (*QRServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateQR",
			Handler:    _QRService_CreateQR_Handler,
		},
		{
			MethodName: "VerifyQR",
			Handler:    _QRService_VerifyQR_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "qr.proto",
}
